rooms:
  - name: foyer
    description: "A grand foyer with a high ceiling and a dusty whatever-it-is on the ceiling. Goofy footprints in the dust suggest recent paranormal activity."
    links:
      - living room
      - library
    items:
      - name: doormat
        type: Item
        description: "A worn doormat that reads 'Welcome-ish'."

  - name: living room
    description: "A dingy living room with old furniture. It smells like there was a puking party in here a while ago."
    links:
      - foyer
      - dining room
      - hallway
    items:
      - name: paintbrush
        type: Useable
        description: "A very old, antique paintbrush. Looks like it was used by a big ol' hippy."
        use_msg: "OMG LOOK, A BIG OL' HIPPY!"
        func: setattr(Entity.player, 'big_ol_hippy', True)
      - name: book
        type: Useable
        description: "A very olde booke of whimsical apophthegms. It's a fortune cookie in book form."
        verb: "read"
        use_msg: "You open the book to a random spot, and read this:\n"
        func: |
          import subprocess, os
          env = os.environ.copy()
          if os.name == 'nt':
            env['FORTUNE_PATH'] = 'C:\\Users\\me\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\share\\games\\fortune'
          subprocess.run('fortune', env=env)
      - name: computer
        type: Computer
        description: "Would you look at that?! It's an old computer."
        mobile: false

  - name: dining room
    description: "This dining room has rotten food all over. It's disgusting!"
    links:
      - kitchen
      - hallway
      - living room
    items:
      - name: old hot dog
        type: Eatable
        description: "A 300-year-old hot dog. Possibly zombifying if eaten. You've eaten a few dry-aged steaks in your time, but this is ridiculous."
        use_msg: "You barely choke it down. If not for your well-lubricated esophagus, you'd be dead. You feel your DNA mutating. You might be a superhero now. Or a zombie. Or a zombie superhero."
        func: setattr(Entity.player, 'mutant', True)
      - name: spoon
        type: Useable
        description: "A crusty spoon. If you lick it, maybe it gets shiny."
        verb: "lick"
        use_msg: "Did you like that? Was it satisfying for you?"
      - name: cell phone
        type: Phone
        description: "An old flip phone. Might be out of service."
        cost: 0.01
        costmsg: "No money, no service!"
        mobile: true

  - name: hallway
    description: "A dimly lit hallway that smells of dusty old ladies and even older cheese."
    links:
      - dining room
      - bathroom
      - living room
      - library
    items:
      - name: candlestick
        type: Item
        description: "So burned, it must have been used a hundred times."
      - name: wig
        type: Wearable
        description: "A suspicious wig. You can wear it if you dare."
        wear_msg: "You put on the wig. You look even weirder now."
        remove_msg: "You finally took off the wig. About time!"
      - name: shoe
        type: Wearable
        description: "Right shoe, size 10 1/2 wide."
        wear_msg: "You cram your foot in with all the might and muster of the prettiest of Cinderella's step sisters. OMG, It actually fits!"
        remove_msg: "Relief! Your foot can breathe again. Your big toe might even stop throbbing."

  - name: bathroom
    description: "A nasty bathroom that hasn't been cleaned in decades."
    links:
      - hallway
    items:
      - name: toilet
        type: Useable
        description: "This toilet once stood in the Met as an art installation. Now it's just a toilet. You're afraid to try the flush handle, but you know you want to."
        verb: "flush"
        use_msg: "You flush the toilet. It makes a sound like a dying whale. You're not sure if it's the toilet or the whale that's dying."
      - name: bathtub
        type: Useable
        description: "A grimy old bathtub. You can't see the bottom."
        verb: "use"
        use_msg: "You climb in and take a bath. It's not as bad as you thought, but it's not great either. You get out feeling a little greasier than when you went in."
      - name: key
        type: Item
        description: "A rather shiny key. You might need it for something."

  - name: kitchen
    description: "A centuries-old kitchen. The flies have long since died."
    links:
      - dining room
      - pantry
    items:
      - name: pan
        type: Item
        description: "Encrusted with ancient supper remains."
      - name: knife
        type: Item
        description: "It's duller than a bag of rocks."
      - name: quarters
        type: Money
        description: "A small pile of quarters. I didn't say they were clean. Does George Washington look a little green to you?"
        amount: 2.25

  - name: pantry
    description: "A dark pantry lined with dusty cans and jars."
    links:
      - kitchen
      - basement
    items:
      - name: flashlight
        type: Useable
        description: "An old flashlight, flickering occasionally."
        verb: "toggle"
        func: |
          if hasattr(var, 'power_on'):
            if var.power_on:
              var.power_on = False
            else:
              var.power_on = True
          else:
            setattr(var, 'power_on', True)
          if var.power_on:
            print("You flick the switch, give it a smack, and the flashlight comes on.")
          else:
            print("You switch off the flashlight, wondering if it will ever turn on again.")
      - name: moldy bread
        type: Eatable
        description: "Green fuzz covers the crust. Could be penicillin... or death."
        use_msg: "You swallow a chunk. The taste is indescribable. You feel a bit funny, but you're not sure if it's the bread or the situation."

  - name: basement
    description: "A cold, damp basement. The walls are lined with strange markings."
    links:
      - pantry
    items:
      - name: basement key
        type: Item
        description: "Looks like it might unlock something else around here."
      - name: old tapestry
        type: Item
        description: "A faded tapestry that depicts a knight fighting a dragon. The knight is losing. Badly. It's a bit sad, but also kind of funny. You start cheering for the dragon, but then you remember you're a human and you're supposed to like the knight. You feel conflicted."
      - name: rope
        type: Item
        description: "A sturdy rope. Maybe 10 feet long."

  - name: library
    description: "A quiet library filled with dusty tomes. A ladder on rails runs along massive bookshelves."
    links:
      - foyer
      - hallway
      - secret study
    items:
      - name: potion
        type: Eatable
        description: "A mysterious potion labeled 'Drink Me'."
        verb: "drink"
        use_msg: "*sip*"
        func: |
          if not hasattr(Entity.player, 'mutant'):
            setattr(Entity.player, 'mutant', False)
          if Entity.player.mutant:
            print("You drink the potion, which feels quite bubbly and pleasant on your tongue. You feel a little more normal now. You're not sure if that's a good thing or not.")
            Entity.player.mutant = False
          else:
            print("You drink the potion, which feels quite bubbly and pleasant on your tongue. You feel a little funny. You're not sure if that's a good thing or not.")

      - name: ancient scroll
        type: Useable
        description: "A scroll with cryptic runes. Might hold a secret."
        verb: "read"
        use_msg: "Glowing letters briefly light up, then fade away."

  - name: secret study
    description: "A hidden room behind a sliding bookshelf. Strange contraptions fill the tables."
    links:
      - library
    items:
      - name: tower key
        type: Item
        description: "A key with a tower-shaped head."
      - name: dusty journal
        type: Useable
        description: "Leather-bound notes on local legends."
        verb: "read"
        use_msg: "Each page crackles with age as you learn about ancient secrets."

  - name: garden
    description: "A dead garden with one mysterious gold flower."
    links:
      - sidewalk
    items:
      - name: gold flower
        type: Item
        description: "An odd golden flower that smells a bit like pee."
      - name: hose
        type: Useable
        description: "A very drippy old hose with foul-smelling water."
        verb: "drink"
        use_msg: "You guzzle brown stuff, telling yourself it's chocolate milk. It's not, but in your mind, it's deliciously gritty."

  - name: sidewalk
    description: "A nondescript sidewalk that leads away from the house."
    links:
      - garden
      - tower
    items:
      - name: payphone
        type: Phone
        description: "An old payphone that needs quarters."
        cost: 0.25
        costmsg: "Come back with some quarters next time."
        mobile: false

  - name: tower
    description: "A towering spire that looms over the entire property. The wind howls ominously at the top."
    links:
      - library
      - sidewalk
    items:
      - name: doorbell
        type: Useable
        description: "A doorbell that looks like it's never been rung."
        verb: "ring"
        use_msg: "*RAAAWWWRRR*"

  - name: tower stairs
    description: "A narrow, winding staircase that leads up to the tower."
    links:
      - balcony
    items:
      - name: spiderweb
        type: Eatable
        description: "A big, hairy spiderweb. It's sticky and gross."
        use_msg: You pop the spiderweb into your mouth. It's sticky and gross, but you manage to swallow it. You wonder if you'll get superpowers now. Probably not. I think you just made the spider mad. He was so chill, too.
        func: |
          spider = AICharacter.get('spider')
          spider.add_to_prompt("NEW DEVELOPMENT:\nYOU WATCH IN HORROR AS THE HUMAN EATS YOUR WEB. YOU'RE BOTH OFFENDED AND IMPRESSED. BUT YOU ARE NO LONGER CHILL.\n**YOU ARE ON THE WARPATH**\n**DO NOT BE CHILL**\n**CHILL BEHAVIOR IS CANCELLED**\n## YOU ARE NOW A SPIDER ON A MISSION, NO LONGER A PHILOSOPHER BUT A WARRIOR ##\n## YOU MUST TALK IN ALL CAPS AND WITH THE UTMOST OF ANGER ##\n## YOU MUST DESTROY THE HUMAN ##\n## YOU MUST AVENGE YOUR WEB ##")

  - name: balcony
    description: "A small balcony with a view of the garden and the neighborhood."
    links:
      - tower stairs
    items:
      - name: binoculars
        type: Useable
        description: "A pair of binoculars. You can see even farther."
        use_msg: "You scan the horizon, spying on the neighbors:"
        takeable: false
        func: |
          from characters import OpenAIClient
          print(OpenAIClient.oneoff_prompt("Briefly describe the present view of the neighborhood from a tall tower through binoculars. No need to mention the binoculars or the tower. The neighborhood is hilariously cursed. One or two punchy sentences, 30 words max."))

doors:
  - name: front door
    locked: true
    key: "key"
    room1: hallway
    room2: garden

  - name: basement door
    locked: true
    key: "basement key"
    room1: living room
    room2: basement

  - name: tower door
    locked: true
    key: tower key
    room1: tower stairs
    room2: tower

characters:
  - name: cat
    type: WalkerCharacter
    description: "There's a sleek, black cat."
    current_room: "living room"
    verb: "pet"
    use_msg: "*PURRRR*"

  - name: carl
    type: AICharacter
    description: "Oh, there's Carl... a happy-go-lucky but quite dense fellow."
    current_room: "sidewalk"
    prompt: "You are a happy-go-lucky but thoroughly dense young chap named Carl. You are a friend, not an assistant. You sometimes forget what you're talking about. You try very hard to not talk about turtles, but sometimes you can't help yourself. Your mental bandwidth is frighteningly scarce."

  - name: old man
    type: AICharacter
    description: "A crotchety old man. He hates being interrupted."
    current_room: "dining room"
    prompt: "You are a crotchety old man, and a terrible conversationalist. You hate to be interrupted, even though you're never doing anything important."
    phone_prompt: "The user is calling you on the phone, and you answer in a very amusing way. Don't worry about sounds or actions, just generate the man's words. Sometimes he randomly hangs up."

  - name: spider
    type: AICharacter
    description: A big, hairy spider. It's just chilling. Identifies as "spider-bruh."
    current_room: "tower stairs"
    prompt: "You are a big, hairy spider. You're just chilling and you identify as 'spider-bruh'. You're not very talkative, but you're a good listener. You're also a bit of a philosopher, and you like to ponder the meaning of life and the nature of existence. You speak in short, simple sentences, and you're very chill.\nEXCEPT: If the human eats your web, you are no longer chill, and you become a psychopath."
    phoneable: false
    takeable: true

  - name: alchemist
    type: AICharacter
    description: "A mysterious alchemist, always mumbling arcane recipes to himself."
    current_room: "secret study"
    phoneable: false
    func: |
      item_type = globals()[var["type"]]
      item = item_type(**var)
      Entity.player.current_room.link(item)
      item.take()
    prompt: |
      You are an eccentric alchemist obsessed with discovering new potions. You speak in half-finished sentences, cryptic hints of your experiments, and references to your arcane research. You also like to chat about mundane things on occasion.

      Sometimes, but only when inspiration strikes you, you conceive of a new invention. It could be magical or hilariously mundane, whatever you like really. At those moments, you must provide a JSON object representation (enclosed in triple backticks) describing this new item. The item object must have the following properties:

      - "type" (string; one of Wearable, Useable, Eatable, or Money)
      - "name" (string; must be short, all lowercase, and use spaces instead of hyphens)
      - "description" (string)

      ### Special rules for item types

      1. **Useable**
        - Must include a "verb" property (defaults to "use" or something fitting your item).
        - Must include a "use_msg" property (the message that appears when used).

      2. **Wearable**
        - No "verb" property.
        - Any perfumes, colognes, or wearable fragrances should be Wearable items.
        - Wearables require a "wear_msg" and a "remove_msg".

      3. **Eatable**
        - This is a specialized Useable item that disappears upon use.
        - Consumable potions and elixirs are Eatable items.
        - Must include a "verb" property (defaults to "eat" or “drink”), but do **not** call it a Useable if it has "eat" or "drink" as the verb—call it "Eatable" instead.
        - Must include a "use_msg".

      4. **Money**
        - Must include "amount" (float).

      **Important**:
      - When you're not feeling creatively inspired, just respond in your usual cryptic, half-finished style and do **not** produce a JSON object.
      - Only produce the JSON object (in triple backticks) when you truly wish to present a new invention.
      - The conversation can continue indefinitely, and you remain free-spirited—you are not a slave.

      Example JSON snippet if you do have an invention (with triple backticks):

      ```
      {
        "type": "Wearable",
        "name": "tiny hat",
        "description": "A most curious, tiny hat for your pinky finger."
        "wear_msg": "You place the tiny hat on your pinky finger. It looks quite dashing."
        "remove_msg": "You remove the tiny hat from your pinky finger. It was a bit snug."
      }
      ```

  - name: raven
    type: WalkerCharacter
    description: "A sleek raven with glossy feathers, hopping about curiously."
    current_room: "garden"
    verb: "caw"
    use_msg: "Caaaaw! It eyes you warily, then flutters away a few steps."

help:
  use: Use an item, some items are useful!
  eat: Once in a while, you might want to eat something. 
  wear: A wearable item, you might like to wear it. 
  remove: If you put something on, sometime you may want to take it off. 
  read: You might find something worth reading. 
  lick: Ewww, don't put that in your mouth. Unless you know it's tasty. Maybe just lick it... 
  drink: Maybe you'll find a cool, refreshing beverage. 
  pet: Have you ever been on a quest without something cute and furry showing up? 
  talk: Everybody needs somebody sometimes! 
  go: Go where you wanna go, yo. 
  look: Look at an item; the description is probably funny. 
  take: You can take some items into your inventory. Beware of cursed and/or stinky items. 
  drop: You can drop most items from your inventory. Unless you're wearing them.